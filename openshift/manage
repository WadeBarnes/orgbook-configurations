#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of TheOrgBook environment.

  Usage:
    $0 [options] [commands]

  Example:
    $0 -P -e test resetDatabase
    - This will reset the database in TheOrgBook's TEST environment.

  Options:
  ========
    -s <ResourceSuffix>; The suffix used to identify the resource instances.
      - Defaults to '${resourceSuffix}'

  Commands:
  ========
    reset
      - Reset the environment.
      - All data will be lost.
        The following operations will be performed:
          - The process pauses at the beginning to ensure the related ICIA reset process has started.
          - The wallet is reset, by restoring initial copy of ICOB Wallet.
          - The 'db' is reset and reinitialized.
          - The search indexes are reset.
          - The process pauses to ensure the related ICIA registration process has had time to complete.
          - The ICIA registration is verified.\n

    resetDatabase
      - Drop and recreate the database.
      - Rebuild search indexes.

    deleteDatabase
      - Deletes all databases off a pod and recycles the pod leaving it in a clean state.
      - Useful when database credentials change.

    resetSearchIndex
      - Delete and recreate the search index for a given environment.

    resetSolrCore
      - Delete and recreate the search-engine core for a given environment.

    rebuildSearchIndex
      - Rebuild the search index for a given environment.

    updateSearchIndex
      - Update the search index for a given environment.
      - Supports passing arguments to updateSearchIndex.sh.  For example:
          $0 -p bc -e dev updateSearchIndex -b 500 -d 2019-07-04T00:00:00

    indexSynced
      - Check to see if the search-engine indexes are syned with the database credentials.

    deleteTopic <topic_id>
      - Delete the specified topic from the OrgBook database.
      Where:
        - <topic_id> is the 'subject_id' of the Topic to delete, e.g. BC1234567
      Example:
        $0 -p bc-tob -e dev deleteTopic BC1234567

    getDbDiskUsage
      - Get the disk usage information for a given database pod.
        For example;
          $0 -e dev getDbDiskUsage wallet-indy-cat

    listDatabases <podName/>
      - List the databases hosted on a given postgresql pod instance.
      Example;
        $0 -e dev listdatabases wallet

    getConnections <podName/>
      - List database connection statistics for a given postgresql pod instance.
      Example;
        $0 -e dev getconnections wallet

    getRecordCounts <podName/> [<databaseName/>]
      - Gets a list of tables and the total number of record in each table.
        Examples;
          $0 -e dev getrecordcounts wallet agent_indy_cat_wallet
            - Get the record counts for the 'agent_indy_cat_wallet' database off the 'wallet' pod.

          $0 -e dev getrecordcounts event-db
          - Get the record counts for the '${POSTGRESQL_DATABASE}' (the pod's default database) database off the 'event-db' pod.

    listBuildRefs
      - Lists build configurations and their git references in a convenient column format.

    getAgentConnections
      - List all agent connections.

    removeAgentConnections
      - Remove all agent connections.

    scaleUp
      - Scale up one or more pods.
        For example;
          $0 -e dev scaleUp api

    scaleDown
      - Scale down one or more pods.
        For example;
          $0 -e dev scaleDown api

    recycle
      - Recycle one or more pods.
        For example;
          $0 -e dev recycle api

EOF
}

# -----------------------------------------------------------------------------------------------------------------
# Defaults:
# -----------------------------------------------------------------------------------------------------------------
resourceSuffix="${resourceSuffix:--indy-cat}"
# -----------------------------------------------------------------------------------------------------------------

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :s: FLAG; then
    case ${FLAG} in
      # List of local options:
      s ) resourceSuffix=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
function resetDatabase() {
  _apiPodName=${1}
  _dbPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ]; then
    echoError "\resetDatabase; You MUST specify the names of the database and api pods.\n"
    exit 1
  fi

  dropAndRecreateDatabaseWithMigrations -a ${_apiPodName}${resourceSuffix} ${_dbPodName}${resourceSuffix}
  rebuildSearchIndex ${_apiPodName}
  echoWarning "\nThe project's database has been reset."
}

function deleteDatabase() {
  _dbPodName=${1}
  if [ -z "${_dbPodName}" ]; then
    echoError "\nresetDatabase; You MUST specify a pod name.\n"
    exit 1
  fi

  printAndAskToContinue "If you contiune all of the databases on ${_dbPodName}${resourceSuffix} will be deleted.  All data will be lost."
  deleteAndRecreateDatabase ${_dbPodName}${resourceSuffix}
  echoWarning "\nThe databases on ${_dbPodName}${resourceSuffix} have been deleted."
}

function reset() {
  (
    agentPod=${1}
    apiPod=${2} # aka controller
    msgQueuePod=${3}
    msgQueueWorkerPod=${4}
    walletDbPod=${5}
    backupPod=${6}
    walletDbName=${7} # Example; agent_indy_cat_wallet
    walletDbBackupSpec=${8} # Example; "wallet-indy-cat:5432/${walletDbName}"
    walletDbBackupFileFilter=${9} # Example; /backups/initialized-wallet
    walletDbAdminPasswordKey=${10}
    dbPod=${11}
    targetNamespace=$(getProjectName)

    if (( $# < 10 )); then
      echo -e \\n"reset; Missing parameter!"\\n
      exit 1
    fi

    # Explain what is about to happen and wait for confirmation ...
txtMsg=$(cat <<-EOF
The [${targetNamespace}] ICOB environment will be reset using the following settings:
  - agentPod: ${agentPod}${resourceSuffix}
  - apiPod: ${apiPod}${resourceSuffix}
  - msgQueuePod: ${msgQueuePod}${resourceSuffix}
  - msgQueueWorkerPod: ${msgQueueWorkerPod}${resourceSuffix}
  - walletDbPod: ${walletDbPod}${resourceSuffix}
  - backupPod: ${backupPod}${resourceSuffix}
  - walletDbName: ${walletDbName}
  - walletDbBackupSpec: ${walletDbBackupSpec}
  - walletDbBackupFileFilter: ${walletDbBackupFileFilter}
  - walletDbAdminPasswordKey: ${walletDbAdminPasswordKey}
  - dbPod: ${dbPod}${resourceSuffix}

The following operations will be performed (ALL DATA WILL BE LOST):
  - The process will pause at the beginning to ensure the related ICIA reset process has started.
  - The wallet will be reset, by restoring initial copy of ICOB Wallet.
  - The 'db' will be reset and reinitialized.
  - The search indexes will be reset.
  - The process will pause to ensure the related ICIA registration process has had time to complete.
  - The ICIA registration will be verified.\n
EOF
)

    printAndAskToContinue "${txtMsg}"

    # - scaledown ICIA controller and agent
    printAndWait "Please ensure the reset process in the corresponding ICIA environment has been started and it has indicated it is safe to process before continuing ..."

    # - scaledown ICOB agent, api, msg-queue, and msg-queue-worker
    echo "Scaling down ${agentPod}${resourceSuffix}, ${apiPod}${resourceSuffix}, ${msgQueuePod}${resourceSuffix} and ${msgQueueWorkerPod}${resourceSuffix} ..."
    scaleDown -w "${apiPod}${resourceSuffix}" "${msgQueueWorkerPod}${resourceSuffix}" "${agentPod}${resourceSuffix}" "${msgQueuePod}${resourceSuffix}"
    exitOnError

    # - reset ICOB Wallet Database, by restoring initial copy of ICOB Wallet.
    echo "Resetting ${walletDbPod}${resourceSuffix} ..."
    if isScaledUp ${backupPod}${resourceSuffix}; then
      local backupStarted=1
    else
      local unset backupStarted
      scaleUp -w "${backupPod}${resourceSuffix}"
      exitOnError
    fi

    runInContainer -i \
      ${backupPod}${resourceSuffix} \
      "./backup.sh -s -a $(getSecret ${walletDbPod}${resourceSuffix} ${walletDbAdminPasswordKey}) -r ${walletDbBackupSpec} -f ${walletDbBackupFileFilter}"
    exitOnError

    if [ -z ${backupStarted} ]; then
      # Leave the backup container in the same state we found it.
      scaleDown "${backupPod}${resourceSuffix}"
      exitOnError
    fi

    # - verify ICOB  Wallet - There should only be 4 items.
    recordCounts=$(getRecordCounts "${walletDbPod}" "${walletDbName}")
    numItems=$(echo "${recordCounts}" | grep items | awk '{print $5}')
    if (( ${numItems} == 4 )); then
      echo "Wallet 'items' count verified; ${numItems} items found."
    else
      echoError "Wallet 'items' count verification failed; ${numItems} items found.  Please fix the issue and try again."
      exit 1
    fi
    exitOnError

    # - scaleup ICOB agent
    echo "Scaling up ${agentPod}${resourceSuffix} ..."
    scaleUp -w "${agentPod}${resourceSuffix}"
    exitOnError

    # - reset ICOB database
    resetDatabase "${apiPod}" "${dbPod}"
    exitOnError

    # - scaleup ICOB msg-queue and msg-queue-worker
    echo "Scaling up ${agentPod}${resourceSuffix}, ${apiPod}${resourceSuffix}, ${msgQueuePod}${resourceSuffix} and ${msgQueueWorkerPod}${resourceSuffix} ..."
    scaleUp -w "${msgQueuePod}${resourceSuffix}" "${msgQueueWorkerPod}${resourceSuffix}"
    exitOnError
    printAndWait "The ICOB reset process is complete.  Please wait here for the associated ICIA instance to finish it's registration process before continuing ..."

    # - verify ICIA registered with ICOB
    #   - >= 3 credential_type records
    #   - >= 3 schema records
    #   - >= 1 issuer record
    recordCounts=$(getRecordCounts "${dbPod}")
    recordCounts=$(echo "${recordCounts}" | tail -n +4)
    numCredentialTypes=$(echo "${recordCounts}" | grep credential_type | awk '{print $5}')
    numSchemas=$(echo "${recordCounts}" | grep schema | awk '{print $5}')
    numIssuers=$(echo "${recordCounts}" | grep issuer | awk '{print $5}')
    if (( ${numCredentialTypes} >= 3 )) && (( ${numSchemas} >= 3 )) && (( ${numIssuers} >= 1 )); then
      echo "ICIA registration verified; credential_type:${numCredentialTypes}, schema:${numSchemas}, and issuer:${numIssuers} records found."
    else
      echoError "ICIA registration verification failed;  credential_type:${numCredentialTypes}, schema:${numSchemas}, and issuer:${numIssuers} records found.  Please fix the issue and try again."
      exit 1
    fi
    exitOnError

    # - Test posting a few credentials using the pipelines
    echo "Provided ICIA has successfully registered with ICOB you can now test things by issuing a few credentials."
  )
}

resetSearchIndex() {
  _apiPodName=${1}
  _solrPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_solrPodName}" ]; then
    echo -e \\n"resetSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  deleteSearchIndex "${_solrPodName}"
  recyclePods -w "${_solrPodName}${resourceSuffix}"
  printAndWait "Wait for the ${_solrPodName}${resourceSuffix} pod to completely start up before continuing."
  rebuildSearchIndex "${_apiPodName}"
}

function resetSolrCore() {
  _apiPodName=${1}
  _solrPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_solrPodName}" ]; then
    echoError \\n"resetSolrCore; Missing parameter!"\\n
    exit 1
  fi

  deleteSolrCore "${_solrPodName}"
  recyclePods -w "${_solrPodName}${resourceSuffix}"
  printAndWait "Wait for the ${_solrPodName}${resourceSuffix} pod to completely start up before continuing."
  rebuildSearchIndex "${_apiPodName}"
}

function deleteSolrCore() {
  _solrPodName=${1}
  if [ -z "${_solrPodName}" ]; then
    echoError \\n"deleteSolrCore; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune the search-engine core on ${_solrPodName}${resourceSuffix} will be deleted."
  deleteFromPod "${_solrPodName}${resourceSuffix}" "/opt/solr/server/solr/mycores/*"
  exitOnError
}

function deleteSearchIndex() {
  _solrPodName=${1}
  if [ -z "${_solrPodName}" ]; then
    echoError \\n"deleteSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune the search index on ${_solrPodName}${resourceSuffix} will be deleted."
  deleteFromPod "${_solrPodName}${resourceSuffix}" "/opt/solr/server/solr/mycores/credential_registry/data/index"
  exitOnError
}

function rebuildSearchIndex() {
  _apiPodName=${1}
  if [ -z "${_apiPodName}" ]; then
    echoError \\n"rebuildSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  echoWarning "\nRebuilding the search index ..."
  runInContainer ${_apiPodName}${resourceSuffix} './scripts/rebuildSearchIndex.sh'
  exitOnError
}

function updateSearchIndex() {
  (
    local OPTIND
    local OPTARG
    unset local args
    while getopts d:b: FLAG; do
      case $FLAG in
        d ) args="${args} -s ${OPTARG}" ;;
        * ) args="${args} -${FLAG} ${OPTARG}" ;;
      esac
    done
    shift $((OPTIND-1))

    _apiPodName=${1:-api}
    if [ -z "${_apiPodName}" ]; then
      echoError \\n"updateSearchIndex; Missing parameter!"\\n
      exit 1
    fi

    echoWarning "\nUpdating the search index ..."
    args="$(echo "${args}" | sed -e 's/^[[:space:]]*//')"
    runInContainer ${_apiPodName}${resourceSuffix} "./scripts/updateSearchIndex.sh ${args}"
  )
}

function indexSynced() {
  _apiPodName=${1}
  _dbPodName=${2}
  if [ -z "${_apiPodName}" ] || [ -z "${_dbPodName}" ]; then
    echoError \\n"rebuildSearchIndex; Missing parameter!"\\n
    exit 1
  fi

  indexInfo=$(curl -s https://orgbook-prod.pathfinder.gov.bc.ca/api/quickload)
  actualCount=$(echo ${indexInfo} | jq -r '.counts.actual_item_count')
  indexCount=$(echo ${indexInfo} | jq -r '.credential_counts.total_indexed_items')
  indexDiff=$(( ${actualCount} - ${indexCount} ))

  if (( ${indexCount} == ${actualCount} )); then
    synced="true"
  else
    synced="false - Difference: ${indexDiff}"
  fi

  echo
  echo "Indexes Synced: ${synced}"
  echo "Indexed Credentials: ${indexCount}"
  echo "Actual Credentials: ${actualCount}"
}

deleteTopic() {
  _topic_id=${1}
  _apiPodName=${2:-api}
  if [ -z "${_topic_id}" ] || [ -z "${_apiPodName}" ]; then
    echo -e \\n"deleteTopic; Missing parameter!"\\n
    exit 1
  fi
  printAndAskToContinue "If you continue the following topic will be permanently deleted from the OrgBook database; '${_topic_id}'."
  runInContainer ${_apiPodName}${resourceSuffix} "./scripts/deleteTopic.sh ${_topic_id}"
  exitOnError
}

function getAgentConnections(){
  (
    _podName=${1}
    if [ -z "${_podName}" ]; then
      echoError "\ngetAgentConnections; You MUST specify a pod name.\n"
      exit 1
    fi

    resonse=$(runInContainer \
      ${_podName}${resourceSuffix} \
      'curl -s -X GET -H "x-api-key:${AGENT_ADMIN_API_KEY}" http://localhost:8024/connections')
    echo "$(echo ${resonse} | jq '.')"
  )
}

function removeAgentConnections(){
  (
    _podName=${1}
    if [ -z "${_podName}" ]; then
      echoError "\nremoveAgentConnections; You MUST specify a pod name.\n"
      exit 1
    fi

    resonse=$(getAgentConnections ${_podName})
    connectionIds=$(echo ${resonse} | jq -r '.results[].connection_id')
    echo

    for connectionId in ${connectionIds}; do
      # Trim whitespace
      connectionId="$(echo -e "${connectionId}" | sed -e 's~^[[:space:]]*~~')"
      echoWarning "Removing connection: '${connectionId}'"
      runInContainer \
        ${_podName}${resourceSuffix} \
        "curl -s -o /dev/null -w \" - %{http_code}\n\" -X POST -H \"x-api-key:\${AGENT_ADMIN_API_KEY}\" http://localhost:8024/connections/${connectionId}/remove"
    done
    echo
  )
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  resetdatabase)
    apiPodName=${1:-api}
    dbPodName=${2:-db}
    resetDatabase "${apiPodName}" "${dbPodName}"
    ;;
  deletedatabase)
    dbPodName=${1}
    deleteDatabase "${dbPodName}"
    ;;

  reset)
    agentPod=${1:-agent}
    apiPod=${2:-api} # aka controller
    msgQueuePod=${3:-msg-queue}
    msgQueueWorkerPod=${4:-msg-queue-worker}
    walletDbPod=${5:-wallet}
    backupPod=${6:-backup}
    walletDbName=${7:-"agent_indy_cat_wallet"}
    walletDbBackupSpec=${8:-"wallet-indy-cat:5432/${walletDbName}"}
    walletDbBackupFileFilter=${9:-"/backups/initialized-wallet"}
    walletDbAdminPasswordKey=${10:-"admin-password"}
    dbPod=${11:-db}

    reset "${agentPod}" \
          "${apiPod}" \
          "${msgQueuePod}" \
          "${msgQueueWorkerPod}" \
          "${walletDbPod}" \
          "${backupPod}" \
          "${walletDbName}" \
          "${walletDbBackupSpec}" \
          "${walletDbBackupFileFilter}" \
          "${walletDbAdminPasswordKey}" \
          "${dbPod}"
    ;;

  resetsearchindex)
    apiPodName=${1:-api}
    solrPodName=${2:-search-engine}
    resetSearchIndex "${apiPodName}" "${solrPodName}"
    ;;
  resetsolrcore)
    apiPodName=${1:-api}
    solrPodName=${2:-search-engine}
    resetSolrCore "${apiPodName}" "${solrPodName}"
    ;;
  rebuildsearchindex)
    apiPodName=${1:-api}
    rebuildSearchIndex "${apiPodName}"
    ;;
  updatesearchindex)
    updateSearchIndex ${@}
    ;;
  indexsynced)
    apiPodName=${1:-api}
    dbPodName=${2:-db}
    indexSynced "${apiPodName}" "${dbPodName}"
    ;;
  deletetopic)
    topic_id=${1}
    apiPodName=${2:-api}
    switchProject
    exitOnError
    deleteTopic "${topic_id}" "${apiPodName}"
    ;;
  getdbdiskusage)
    dbPodName=${1}
    getPostgreSqlDatabaseDiskUsage ${dbPodName}
    ;;
  listdatabases)
    dbPodName=${1}
    listDatabases "${dbPodName}"
    ;;
  getrecordcounts)
    if (( $# <= 1 )); then
      dbPodName=${1}
    else
      dbPodName=${1}
      databaseName=${2}
    fi
    getRecordCounts "${dbPodName}" "${databaseName}"
    ;;
  getconnections)
    dbPodName=${1}
    getConnections "${dbPodName}"
    ;;
  listbuildrefs)
    listBuildRefs
    ;;
  getagentconnections)
    agentPodName=${1:-agent}
    getAgentConnections "${agentPodName}"
    ;;
  removeagentconnections)
    agentPodName=${1:-agent}
    removeAgentConnections "${agentPodName}"
    ;;

  scaleup)
    scaleUp -w ${@}
    ;;
  scaledown)
    scaleDown -w ${@}
    ;;
  recycle)
    recyclePods -w ${@}
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null